import React,{useState,useEffect} from "react";
import { split as SplitEditor } from "react-ace";
import "ace-builds/src-noconflict/mode-java";
import "ace-builds/src-noconflict/mode-c_cpp";
import "ace-builds/src-noconflict/mode-python";
import "ace-builds/src-noconflict/theme-github";
import "ace-builds/src-noconflict/theme-terminal";
import "ace-builds/src-noconflict/theme-monokai";
import axios from "axios";
import stubs from "../defaultStubs";
import moment from "moment";



const Editor = (props) => {
    const [font_size,setFontSize]=useState("18px")
    const [code, setCode] = useState("");
    const [output, setOutput] = useState("");
    const [language, setLanguage] = useState("cpp");
    const [jobId, setJobId] = useState(null);
    const [status, setStatus] = useState(null);
    const [jobDetails, setJobDetails] = useState(null);
    
    useEffect(() => {
      const defaultLang = localStorage.getItem("default-language") || "cpp";
      setLanguage(defaultLang);
    }, []);
    
    useEffect(() => {
        // props.showAlert("Language changed successfully!","success");
    }, [language])
    

    let pollInterval;
    const handleSubmit = async () => {
      const payload = {
        language,
        code,
      };
      try {
        setOutput("");
        setStatus(null);
        setJobId(null);
        setJobDetails(null);
        const { data } = await axios.post("http://localhost:5000/run", payload);
        if (data.jobId) {
          setJobId(data.jobId);
          setStatus("Submitted.");
  
          // poll here
          pollInterval = setInterval(async () => {
            const { data: statusRes } = await axios.get(
              `http://localhost:5000/status`,
              {
                params: {
                  id: data.jobId,
                },
              }
            );
            const { success, job, error } = statusRes;
            console.log(statusRes);
            if (success) {
              const { status: jobStatus, output: jobOutput } = job;
              setStatus(jobStatus);
              setJobDetails(job);
              if (jobStatus === "pending") return;
              setOutput(jobOutput);
              clearInterval(pollInterval);
            } else {
              console.error(error);
              setOutput(error);
              setStatus("Bad request");
              clearInterval(pollInterval);
            }
          }, 1000);
        } else {
          setOutput("Retry again.");
        }
      } catch ({ response }) {
        if (response) {
          const errMsg = response.data.err.stderr;
          setOutput(errMsg);
        } else {
          setOutput("Please retry submitting.");
        }
      }
    };
     
    const setDefaultLanguage = () => {
      localStorage.setItem("default-language", language);
      console.log(`${language} set as default!`);
    };
  
    const renderTimeDetails = () => {
      if (!jobDetails) {
        return "";
      }
      let { submittedAt, startedAt, completedAt } = jobDetails;
      let result = "";
      submittedAt = moment(submittedAt).toString();
      result += `Job Submitted At: ${submittedAt}  `;
      if (!startedAt || !completedAt) return result;
      const start = moment(startedAt);
      const end = moment(completedAt);
      const diff = end.diff(start, "seconds", true);
      result += `Execution Time: ${diff}s`;
      return result;
    };

    let flag=1;
    return (
    <div className={`hero${props.mode}`}>
      <div className="container">
          <br />
      <select
          value={language}
          onChange={(e) => {
                setLanguage(e.target.value);
                props.showAlert("Language changed successfully!","success");
            }}
            >
          <option value="cpp">C++</option>
          <option value="py">Python</option>
        </select>
      <br />
      <br />
      <div>
        <button className="btn btn-sm btn-dark" onClick={setDefaultLanguage}>Set Default</button>
      </div>
      <br />
  <SplitEditor
  name="UNIQUE_ID_OF_DIV"
  mode={language==='py'?'python':'c_cpp'}
  theme="terminal"
  splits={1}
  orientation="beside"
  value={code}
  width="80%"
  editorProps={{ $blockScrolling: true }}
  fontSize={font_size}
  onChange={(value)=>{setCode(value)}}
  />
  <br />
      <button className="btn submitButton"onClick={handleSubmit}>Submit</button>
      <p>{status}</p>
      {/* <p>{jobId ? `Job ID: ${jobId}` : ""}</p> */}
      <p>{renderTimeDetails()}</p>
      <p>{output}</p>
    </div>
  </div>
  );
}
  export default Editor
  